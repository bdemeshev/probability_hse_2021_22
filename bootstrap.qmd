---
title: "Бутстрэп"
format: pdf
editor: source
language: ru-ru
---


# Бутстрэп



## Наивный или перцентильный бутстрэп

$$
[q_L(\hat a^*); q_R(\hat a^*)]
$$
```{python}
import numpy as np
from arch.bootstrap import IIDBootstrap
from arch.bootstrap import IndependentSamplesBootstrap
```


* Доверительный интервал для $\mu$.



Сгенерируем данные $X_t \sim \text{Normal}(\text{loc} = 0.2, \text{scale} = 1)$.
```{python}
rs = np.random.RandomState(0)
x = 0.2 + rs.standard_normal(200)
```

Создадим функцию, которая по выборке считает оценку,
в данном случае $\hat\mu = \bar X$.
```{python}
def mu_hat(x):
    return np.mean(x)
```

Скармливаем пакету выборку, нашу статистику, количество репликаций, зерно генератора 
```{python}
bs = IIDBootstrap(x)
ci = bs.conf_int(mu_hat, 1000, method='percentile')
```



* Доверительный интервал для $\delta = \mu_b - \mu_a$.


Генерируем две выборки
```{python}
rs = np.random.RandomState(0)
treatment = 0.2 + rs.standard_normal(200)
control = rs.standard_normal(800)
```

Выписываем формулу для оценки:
```{python}
def delta_hat(x, y):
    return x.mean() - y.mean()
```

Запускаем бутстрэп
```{python}
bs = IndependentSamplesBootstrap(treatment, control, random_state=rs)
print(bs.conf_int(delta_hat, method='percentile'))
```



## Бутстрэп t-статистики

$$
[\hat a - q_R(t^*)\cdot se(\hat a); \hat a - q_L(t^*)\cdot se(\hat a)]
$$

Чтобы посчитать $t^*$ надо иметь формулу для $se(\hat a^*)$:
$$
t^* = \frac{\hat a^* - \hat a}{se(\hat a^*)}
$$




Запускаем бутстрэп в бутстрэпе
```{python}
bs = IndependentSamplesBootstrap(treatment, control, random_state=rs)
print(bs.conf_int(delta_hat, method='studentized'))
```


Он работает чертовски медленно. 
Можно указать формулу для вычисления стандартной ошибки. 










