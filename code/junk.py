# -*- coding: utf-8 -*-
"""training.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aATOcbpzO3jU1tr19EO_n9RIvrgZyqnR
"""

!pip install sktime[all_extras];

import pandas as pd
import numpy as np
import seaborn as sns

from sktime.datasets import load_uschange, load_airline
from sktime.utils.plotting import plot_series, plot_correlations
from sktime.forecasting.all import temporal_train_test_split

from sktime.forecasting.ets import AutoETS
from sktime.forecasting.arima import AutoARIMA
from sktime.forecasting.arima import ARIMA
from sktime.forecasting.naive import NaiveForecaster
from sktime.forecasting.theta import ThetaForecaster

from sktime.performance_metrics.forecasting import mean_absolute_percentage_error

from sktime.forecasting.model_selection import ExpandingWindowSplitter, ForecastingGridSearchCV

from statsmodels.tsa.stattools import adfuller, kpss 
from statsmodels.tsa.seasonal import STL

air = load_airline()

air

plot_series(air);

load_uschange()

cons, data = load_uschange()

cons

?load_uschange()

time_points = pd.date_range(start='1960Q1', periods=len(cons), freq='QS')
time_points

time_periods = time_points.to_period()
time_periods

data['Consumption'] = cons
data['date1'] = time_points
data['date2'] = time_periods
data.index = time_periods

data.head()

sns.lineplot(data=data, y='Consumption', x='date1');

plot_series(air);

plot_series(data['Consumption']);

plot_correlations(data['Consumption'], zero_lag=False);

type(air)

air_more = pd.DataFrame(air)

air_more.columns = ['pass']

air_more.describe()

air_more.info()

air_more['t'] = 1 + np.array(range(air_more.size))

air_more

air_more

from sklearn.linear_model import LinearRegression

from numpy import cos, sin, pi, log, exp

air_more['c1'] = cos(1 * 2*pi*air_more['t']/12)
air_more['c2'] = cos(2 * 2*pi*air_more['t']/12)
air_more['s1'] = sin(1 * 2*pi*air_more['t']/12)
air_more['s2'] = sin(2 * 2*pi*air_more['t']/12)

linreg = LinearRegression()

X = air_more[['c1', 'c2', 's1', 's2', 't']]
y = air_more['pass']

linreg_fit = linreg.fit(X, y)

linreg_fit.coef_



air2 = air_more.copy()
air2.index = air2.index.to_timestamp()

stl_model2 = STL(air2['pass'], period=12).fit()

stl_model2.plot();

arima112 = ARIMA(order=(1, 1, 2), seasonal_order=(0, 0, 0, 12))
arima112.fit(air_train)

from sktime.forecasting.model_selection import ExpandingWindowSplitter, ForecastingGridSearchCV


fh = list(range(1, 3))

forecaster = AutoETS(sp=24)
param_grid = {
    'error': ['add', 'mul'],
    'trend': [None, 'add'],
    'seasonal': ['add', 'mul'],
    # 'damped_trend': [True, False]
}

cv = ExpandingWindowSplitter(
    initial_window=700,
    step_length=len(y_test),
    # start_with_window=True,
    fh=fh)
gscv = ForecastingGridSearchCV(
    forecaster=forecaster,
    param_grid=param_grid,
    cv=cv,
    n_jobs=-1
    )
gscv.fit(y_train)

gscv.best_params_

gscv.predict_residuals()



plot_series(np.log(air));



air_train, air_test = temporal_train_test_split(air, test_size=24)

plot_series(air_train, air_test, labels=['Обучающая выборка', 'Тестовая выборка']);

ets_aaa = AutoETS(error='add', trend='add', seasonal='add', sp=12)
ets_auto = AutoETS(auto=True, sp=12)

ets_aaa.fit(air_train)
ets_auto.fit(air_train)

ets_aaa.summary()

ets_auto.summary()

horizon = list(range(1, 25))

ets_aaa_fcst = ets_aaa.predict(fh=horizon)
ets_auto_fcst = ets_auto.predict(fh=horizon)

ets_aaa_fcst

plot_series(air_train, air_test, ets_aaa_fcst, labels=['Обучающая', 'Тестовая', 'Прогноз ETS(AAA)']);

# MAPE = sum |y_i - \hat y_i| / (  0.5 y_i + 0.5 \hat y_i  )    
# non-symmetric MAPE sum |y_i - \hat y_i| / y_i
mean_absolute_percentage_error(air_test, ets_aaa_fcst)

mean_absolute_percentage_error(air_test, ets_auto_fcst)

snaive = NaiveForecaster(strategy='last', sp=12)
snaive.fit(air_train)
snaive_fcst = snaive.predict(fh=horizon)
mean_absolute_percentage_error(air_test, snaive_fcst)

# ARMA(1,1) = ARIMA(1, 0, 1)
# y_t = c + b_1 y_{t-1} + u_t + a_1 u_{t-1}

arma11 = ARIMA(order=(1, 0, 1), seasonal_order=(0, 0, 0, 12))
arma11.fit(air_train)
arma11_fcst = arma11.predict(fh=horizon)
mean_absolute_percentage_error(air_test, arma11_fcst)

arma11.summary()

# y_t ~ ARIMA(1, 1, 2)     <==>    Delta y_t ~ ARIMA(1, 0, 2) = ARMA(1, 2)
# 
# Delta y_t = c + b_1 Delta y_{t-1} + u_t + a_1 u_{t-1} + a_2 u_{t-2}

arima112 = ARIMA(order=(1, 1, 2), seasonal_order=(0, 0, 0, 12))
arima112.fit(air_train)
arima112_fcst = arima112.predict(fh=horizon)
mean_absolute_percentage_error(air_test, arima112_fcst)

# y_t ~ ARIMA(1, 2, 1)
# z_t = Delta y_t
# w_t = Delta z_t = Delta^2 y_t
# w_t ~ ARMA(1, 1)